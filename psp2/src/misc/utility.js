define(["require", "exports", 'aurelia-http-client'], function (require, exports, aurelia_http_client_1) {
    var BaseUtility = (function () {
        function BaseUtility(http) {
            this.http = http;
        }
        BaseUtility.prototype.loadUrl = function (url) {
            var _this = this;
            var self = this;
            return this.http.get(url).then(function (response) {
                var model = response.content;
                return _this.loadReference(model);
            });
        };
        BaseUtility.prototype.loadReference = function (model) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                if (!model || !model.reference || model.url) {
                    resolve(model);
                    return;
                }
                _this.http.get('/views/psp/data/' + model.reference).then(function (response) {
                    var data = response.content;
                    var found = data.find(function (item) { return item.title == model.title; });
                    if (!found) {
                        console.error('missing component ' + model.reference + "!" + model.title);
                        reject('missing component ' + model.reference + "!" + model.title);
                    }
                    if (found.hidden) {
                        resolve(null);
                    }
                    Object.assign(model, found);
                    resolve(model);
                });
            });
        };
        BaseUtility.prototype.loadTabUrl = function (url, index, tabModel) {
            var self = this;
            return this.http.get(url).then(function (response) {
                var model = response.content;
                return model.hidden ? null : model;
            })
                .then(function (model) {
                if (model == null)
                    return null;
                var models = model;
                models = models.filter(function (item) {
                    return !item.hidden;
                });
                return self.loadReference(model).then(function (response) {
                    var model = response;
                    if (model.hidden)
                        return null;
                    model.index = index;
                    var models = model;
                    models = models.filter(function (item) {
                        return !item.hidden;
                    });
                    tabModel.tabs = models;
                    return tabModel;
                });
            });
        };
        BaseUtility.prototype.loadAllTabs = function (url) {
            //console.log("loadAllTabs", url);
            var self = this;
            // load tabs.json
            return this.http.get(url).then(function (response) {
                var data = response.content;
                var promises = [];
                for (var idx = 0; idx < data.length; idx++) {
                    var model = data[idx];
                    if (model.hidden)
                        continue;
                    // load test.json
                    var url_1 = "./views/psp/data/" + model.json;
                    promises.push(self.loadTabUrl(url_1, idx, model));
                }
                ;
                return Promise.all(promises).then(function (results) {
                    var models = [];
                    for (var _i = 0; _i < results.length; _i++) {
                        var result = results[_i];
                        if (result && !result.hidden)
                            models.push(result);
                    }
                    models.sort(function (left, right) {
                        if (left.index == right.index)
                            return 0;
                        return (left.index < right.index) ? -1 : 1;
                    });
                    return models;
                });
            });
        };
        BaseUtility.findParent = function ($elem, selector) {
            var parent = $elem.parent(selector);
            while (parent && parent[0] == null) {
                $elem = $elem.parent();
                if ($elem[0] == null)
                    return null;
                parent = $elem.parent(selector);
            }
            return parent;
        };
        BaseUtility.inject = [aurelia_http_client_1.HttpClient];
        return BaseUtility;
    })();
    exports.BaseUtility = BaseUtility;
    var Extensions;
    (function (Extensions) {
        var ArrayExt;
        (function (ArrayExt) {
            function insert(index, item) {
                this.splice(index, 0, item);
            }
            ArrayExt.insert = insert;
            ;
            function removeAll(thisArg) {
                thisArg = thisArg || this;
                while (thisArg.length > 0)
                    thisArg.pop();
            }
            ArrayExt.removeAll = removeAll;
            // TODO: Fix?
            function remove(elem, thisArg) {
                thisArg = thisArg || this;
                var idx = thisArg.indexOf(elem);
                if (idx >= 0 && idx < thisArg.length)
                    return thisArg.slice(idx, 1);
                return null;
            }
            ArrayExt.remove = remove;
            function indexOf(elem, thisArg) {
                thisArg = thisArg || this;
                var idx = thisArg.indexOf(elem);
                return idx;
            }
            ArrayExt.indexOf = indexOf;
            //Array.prototype.insert = ArrayExt.insert;
            //Array.prototype.first = ArrayExt.first;
            Array.prototype.remove = ArrayExt.remove;
        })(ArrayExt = Extensions.ArrayExt || (Extensions.ArrayExt = {}));
        var StringExt;
        (function (StringExt) {
            function hashCode() {
                var hash = 0, i, chr, len;
                if (this.length == 0)
                    return hash;
                for (i = 0, len = this.length; i < len; i++) {
                    chr = this.charCodeAt(i);
                    hash = ((hash << 5) - hash) + chr;
                    hash |= 0; // Convert to 32bit integer
                }
                return hash;
            }
            StringExt.hashCode = hashCode;
            ;
        })(StringExt = Extensions.StringExt || (Extensions.StringExt = {}));
    })(Extensions || (Extensions = {}));
});

//# sourceMappingURL=data:application/json;base64,