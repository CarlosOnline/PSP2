var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define(["require", "exports", './../../misc/utility'], function (require, exports, utility_1) {
    // TODO: Switch to Utility versions
    var Utility = (function (_super) {
        __extends(Utility, _super);
        function Utility() {
            _super.apply(this, arguments);
        }
        Utility.findSnippet = function ($elem) {
            var parent;
            do {
                var snippet = $elem.data("item");
                if (snippet != null)
                    return snippet;
                $elem = $elem.parent();
                if ($elem[0] == null)
                    return null;
                parent = $elem.parent("tr");
            } while (parent);
            return null;
        };
        Utility.findSnippetFromElement = function (elem) {
            var parent = $(elem);
            while (parent != null) {
                var snippet = parent.data("item");
                if (snippet != null)
                    return snippet;
                parent = Utility.findParent(parent, "tr");
            }
        };
        return Utility;
    })(utility_1.BaseUtility);
    exports.Utility = Utility;
    function findSnippet($elem) {
        var parent;
        do {
            var snippet = $elem.data("item");
            if (snippet != null)
                return snippet;
            $elem = $elem.parent();
            if ($elem[0] == null)
                return null;
            parent = $elem.parent("tr");
        } while (parent);
        return null;
    }
    function findSnippetFromElement(elem) {
        var parent = $(elem);
        while (parent != null) {
            var snippet = parent.data("item");
            if (snippet != null)
                return snippet;
            parent = Utility.findParent(parent, "tr");
        }
    }
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZpZXdzL3BzcC9jb21tb24vdXRpbGl0eS50cyJdLCJuYW1lcyI6WyJVdGlsaXR5IiwiVXRpbGl0eS5jb25zdHJ1Y3RvciIsIlV0aWxpdHkuZmluZFNuaXBwZXQiLCJVdGlsaXR5LmZpbmRTbmlwcGV0RnJvbUVsZW1lbnQiLCJmaW5kU25pcHBldCIsImZpbmRTbmlwcGV0RnJvbUVsZW1lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7SUFPQSxBQUNBLG1DQURtQzs7UUFDTkEsMkJBQVdBO1FBQXhDQTtZQUE2QkMsOEJBQVdBO1FBNEJ4Q0EsQ0FBQ0E7UUExQlFELG1CQUFXQSxHQUFsQkEsVUFBbUJBLEtBQWFBO1lBQzlCRSxJQUFJQSxNQUFNQSxDQUFDQTtZQUNYQSxHQUFHQSxDQUFDQTtnQkFDRkEsSUFBSUEsT0FBT0EsR0FBR0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ2pDQSxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxJQUFJQSxJQUFJQSxDQUFDQTtvQkFDbEJBLE1BQU1BLENBQUNBLE9BQU9BLENBQUNBO2dCQUVqQkEsS0FBS0EsR0FBR0EsS0FBS0EsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0E7Z0JBQ3ZCQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQTtvQkFDbkJBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO2dCQUVkQSxNQUFNQSxHQUFHQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUM5QkEsQ0FBQ0EsUUFBUUEsTUFBTUEsRUFBRUE7WUFDakJBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBQ2RBLENBQUNBO1FBRU1GLDhCQUFzQkEsR0FBN0JBLFVBQThCQSxJQUFpQkE7WUFDN0NHLElBQUlBLE1BQU1BLEdBQUdBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQ3JCQSxPQUFPQSxNQUFNQSxJQUFJQSxJQUFJQSxFQUFFQSxDQUFDQTtnQkFDdEJBLElBQUlBLE9BQU9BLEdBQUdBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO2dCQUNsQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsT0FBT0EsSUFBSUEsSUFBSUEsQ0FBQ0E7b0JBQ2xCQSxNQUFNQSxDQUFDQSxPQUFPQSxDQUFDQTtnQkFFakJBLE1BQU1BLEdBQUdBLE9BQU9BLENBQUNBLFVBQVVBLENBQUNBLE1BQU1BLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1lBQzVDQSxDQUFDQTtRQUNIQSxDQUFDQTtRQUNISCxjQUFDQTtJQUFEQSxDQTVCQSxBQTRCQ0EsRUE1QjRCLHFCQUFXLEVBNEJ2QztJQTVCWSxlQUFPLFVBNEJuQixDQUFBO0lBRUQscUJBQXFCLEtBQWE7UUFDaENJLElBQUlBLE1BQU1BLENBQUNBO1FBQ1hBLEdBQUdBLENBQUNBO1lBQ0ZBLElBQUlBLE9BQU9BLEdBQUdBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1lBQ2pDQSxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxJQUFJQSxJQUFJQSxDQUFDQTtnQkFDbEJBLE1BQU1BLENBQUNBLE9BQU9BLENBQUNBO1lBRWpCQSxLQUFLQSxHQUFHQSxLQUFLQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQTtZQUN2QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0E7Z0JBQ25CQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtZQUVkQSxNQUFNQSxHQUFHQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUM5QkEsQ0FBQ0EsUUFBUUEsTUFBTUEsRUFBRUE7UUFDakJBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO0lBQ2RBLENBQUNBO0lBRUQsZ0NBQWdDLElBQWlCO1FBQy9DQyxJQUFJQSxNQUFNQSxHQUFHQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUNyQkEsT0FBT0EsTUFBTUEsSUFBSUEsSUFBSUEsRUFBRUEsQ0FBQ0E7WUFDdEJBLElBQUlBLE9BQU9BLEdBQUdBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1lBQ2xDQSxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxJQUFJQSxJQUFJQSxDQUFDQTtnQkFDbEJBLE1BQU1BLENBQUNBLE9BQU9BLENBQUNBO1lBRWpCQSxNQUFNQSxHQUFHQSxPQUFPQSxDQUFDQSxVQUFVQSxDQUFDQSxNQUFNQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUM1Q0EsQ0FBQ0E7SUFDSEEsQ0FBQ0EiLCJmaWxlIjoidmlld3MvcHNwL2NvbW1vbi91dGlsaXR5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZVV0aWxpdHkgfSBmcm9tICcuLy4uLy4uL21pc2MvdXRpbGl0eSc7XHJcbmltcG9ydCB7IEFwcCB9IGZyb20gJy4vLi4vLi4vYXBwJztcclxuaW1wb3J0IHsgSXRlbVR5cGUsIEl0ZW1WaWV3TW9kZWwgfSBmcm9tICcuLy4uL2l0ZW1WaWV3TW9kZWwnO1xyXG5pbXBvcnQgeyBTbmlwcGV0IH0gZnJvbSAnLi8uLi9zbmlwcGV0JztcclxuaW1wb3J0IHsgQ29tcG9uZW50Rm9ybSB9IGZyb20gJy4vLi4vY29tcG9uZW50LWZvcm0nO1xyXG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLy4uL2NvbXBvbmVudCc7XHJcblxyXG4vLyBUT0RPOiBTd2l0Y2ggdG8gVXRpbGl0eSB2ZXJzaW9uc1xyXG5leHBvcnQgY2xhc3MgVXRpbGl0eSBleHRlbmRzIEJhc2VVdGlsaXR5IHtcclxuXHJcbiAgc3RhdGljIGZpbmRTbmlwcGV0KCRlbGVtOiBKUXVlcnkpOiBTbmlwcGV0IHtcclxuICAgIHZhciBwYXJlbnQ7XHJcbiAgICBkbyB7XHJcbiAgICAgIHZhciBzbmlwcGV0ID0gJGVsZW0uZGF0YShcIml0ZW1cIik7XHJcbiAgICAgIGlmIChzbmlwcGV0ICE9IG51bGwpXHJcbiAgICAgICAgcmV0dXJuIHNuaXBwZXQ7XHJcblxyXG4gICAgICAkZWxlbSA9ICRlbGVtLnBhcmVudCgpO1xyXG4gICAgICBpZiAoJGVsZW1bMF0gPT0gbnVsbClcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgIHBhcmVudCA9ICRlbGVtLnBhcmVudChcInRyXCIpO1xyXG4gICAgfSB3aGlsZSAocGFyZW50KTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGZpbmRTbmlwcGV0RnJvbUVsZW1lbnQoZWxlbTogSFRNTEVsZW1lbnQpIHtcclxuICAgIHZhciBwYXJlbnQgPSAkKGVsZW0pO1xyXG4gICAgd2hpbGUgKHBhcmVudCAhPSBudWxsKSB7XHJcbiAgICAgIHZhciBzbmlwcGV0ID0gcGFyZW50LmRhdGEoXCJpdGVtXCIpO1xyXG4gICAgICBpZiAoc25pcHBldCAhPSBudWxsKVxyXG4gICAgICAgIHJldHVybiBzbmlwcGV0O1xyXG5cclxuICAgICAgcGFyZW50ID0gVXRpbGl0eS5maW5kUGFyZW50KHBhcmVudCwgXCJ0clwiKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbmRTbmlwcGV0KCRlbGVtOiBKUXVlcnkpOiBTbmlwcGV0IHtcclxuICB2YXIgcGFyZW50O1xyXG4gIGRvIHtcclxuICAgIHZhciBzbmlwcGV0ID0gJGVsZW0uZGF0YShcIml0ZW1cIik7XHJcbiAgICBpZiAoc25pcHBldCAhPSBudWxsKVxyXG4gICAgICByZXR1cm4gc25pcHBldDtcclxuXHJcbiAgICAkZWxlbSA9ICRlbGVtLnBhcmVudCgpO1xyXG4gICAgaWYgKCRlbGVtWzBdID09IG51bGwpXHJcbiAgICAgIHJldHVybiBudWxsO1xyXG5cclxuICAgIHBhcmVudCA9ICRlbGVtLnBhcmVudChcInRyXCIpO1xyXG4gIH0gd2hpbGUgKHBhcmVudCk7XHJcbiAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbmRTbmlwcGV0RnJvbUVsZW1lbnQoZWxlbTogSFRNTEVsZW1lbnQpIHtcclxuICB2YXIgcGFyZW50ID0gJChlbGVtKTtcclxuICB3aGlsZSAocGFyZW50ICE9IG51bGwpIHtcclxuICAgIHZhciBzbmlwcGV0ID0gcGFyZW50LmRhdGEoXCJpdGVtXCIpO1xyXG4gICAgaWYgKHNuaXBwZXQgIT0gbnVsbClcclxuICAgICAgcmV0dXJuIHNuaXBwZXQ7XHJcblxyXG4gICAgcGFyZW50ID0gVXRpbGl0eS5maW5kUGFyZW50KHBhcmVudCwgXCJ0clwiKTtcclxuICB9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9