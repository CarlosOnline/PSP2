var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
define(["require", "exports", 'aurelia-framework', './../formEditor'], function (require, exports, aurelia_framework_1, formEditor_1) {
    var g_DebugMode = false;
    var SortableViewModel = (function () {
        function SortableViewModel(form) {
            var _this = this;
            this.form = null;
            this.start = function (event, ui) {
                $(".popover").remove();
                var snippet = ui.item.data("item");
                if (snippet == null) {
                    if (g_DebugMode)
                        console.log("start - missing snippet");
                    return;
                }
                if (snippet.model.title == "Null") {
                    return;
                }
                snippet.sorting.toBeRemoved = false;
                if (g_DebugMode)
                    console.log("start", snippet.id, _this.element.id, $(_this.element).sortable("option", "connectWith"));
                $(snippet.connectWith).addClass("snippet-sort-connectWith");
                if (snippet.isPlaceHolder)
                    return;
                ui.item.data("form", self);
                ui.item.addClass("snippet-sort-hover");
                var elem = document.getElementById("placeholder-drop-target");
                if (elem != null)
                    ui.placeholder.html(elem.innerHTML);
                else
                    ui.placeholder.html('<td class="target" colspan="2" style="width: 100%;" >&nbsp;</td>');
                ui.placeholder.width(g_formWidth);
            };
            this.stop = function (event, ui) {
                var snippet = ui.item.data("item");
                if (snippet == null) {
                    if (g_DebugMode)
                        console.log("stop - missing snippet");
                    return;
                }
                snippet.sorting.stopped = true;
                $(snippet.connectWith).removeClass("snippet-sort-connectWith");
                if (g_DebugMode)
                    console.log("stop", snippet.id, _this.element.id, snippet.sorting.toBeRemoved);
                if (snippet.isPlaceHolder) {
                    $(_this.element).sortable("cancel");
                }
                else if (_this.commonTab) {
                    if (snippet.sorting.toBeRemoved) {
                        if (g_DebugMode)
                            console.log("removing snippet", snippet.id, snippet.element.id, _this.element.id, snippet.sorting.toBeRemoved);
                        var idx = _this.snippets.indexOf(snippet);
                        _this.snippets.remove(snippet);
                    }
                }
                else if (_this.targetMode) {
                    if (snippet.sorting.toBeRemoved) {
                        if (g_DebugMode)
                            console.log("removing snippet", snippet.id, snippet.element.id, _this.element.id, snippet.sorting.toBeRemoved);
                        _this.snippets.remove(snippet);
                    }
                    else if (_this.form == snippet.form) {
                        // moved
                        var idx = ui.item[0].rowIndex;
                        var idxStart = snippet.form.items.indexOf(snippet);
                        if (idx != idxStart) {
                            snippet.form.items.splice(idxStart, 1);
                            snippet.form.items.splice(idx, 0, snippet);
                        }
                    }
                }
                _this.refresh();
                _this.editor.updateUiElements();
                setTimeout(function () {
                    _this.editor.updateUiElements();
                }, 250);
            };
            this.out = function (event, ui) {
                if (_this.readOnly || ui.item == null)
                    return;
                var snippet = ui.item.data("item");
                if (snippet == null) {
                    if (g_DebugMode)
                        console.log("out - missing snippet");
                    return;
                }
                if (snippet.sorting.stopped)
                    return;
                if (g_DebugMode && !snippet.sorting.toBeRemoved)
                    console.log("out snippet", snippet.id, snippet.element.id, _this.element.id, snippet.sorting.toBeRemoved);
                snippet.sorting.toBeRemoved = true;
            };
            this.over = function (event, ui) {
                if (_this.readOnly || ui.item == null)
                    return;
                // TODO: Dynamic acceptsFrom
                var snippet = ui.item.data("item");
                if (snippet == null) {
                    if (g_DebugMode)
                        console.log("over - missing snippet");
                    return;
                }
                if (snippet.sorting.stopped)
                    return;
                if (g_DebugMode && snippet.sorting.toBeRemoved)
                    console.log("in snippet", snippet.id, snippet.element.id, _this.element.id, snippet.sorting.toBeRemoved);
                snippet.sorting.toBeRemoved = false;
            };
            this.remove = function (event, ui) {
                var snippet = ui.item.data("item");
                if (snippet == null) {
                    if (g_DebugMode)
                        console.log("remove - missing snippet");
                    return;
                }
                if (g_DebugMode)
                    console.log("remove", snippet.id, _this.element.id, _this.element.id);
                // TODO: don't remove if going to Common Tab
                if (snippet.targetMode) {
                    snippet.form.items.remove(snippet);
                }
                _this.refresh();
            };
            this.receive = function (event, ui) {
                var snippet = ui.item.data("item");
                if (snippet == null) {
                    if (g_DebugMode)
                        console.log("receive - missing snippet");
                    return;
                }
                if (snippet.isPlaceHolder) {
                    $(_this.element).sortable("cancel");
                    _this.refresh();
                    return;
                }
                if (g_DebugMode)
                    console.log("receive", snippet.id, _this.element.id, snippet.sorting.toBeRemoved);
                var idx = $(event.target).children().index(ui.item);
                console.error("TODO: Figure out receive for", snippet);
                /* TODO - figure out receive
                var newSnippet = snippet.clone(this.form);
                if (idx != -1) {
                  this.snippets.insert(idx, newSnippet);
                }
                */
                _this.refresh();
            };
            this.refresh = function () {
                // Don't use .remove() b/c it kills the .data for the elements too
                // $(this.element).children().remove();
                while (_this.element.children.length > 0) {
                    _this.element.removeChild(_this.element.children[0]);
                }
                var save = [];
                var placeHolder = null;
                _.forEach(_this.snippets, function (snippet) {
                    if (snippet.isPlaceHolder)
                        placeHolder = snippet;
                    else
                        save.push(snippet);
                });
                if (placeHolder != null)
                    save.push(placeHolder);
                // TODO: subscriptions
                //this.form.subscriptions.disposeAll();
                _this.snippets.length = 0;
                _.forEach(save, function (snippet) {
                    _this.snippets.push(snippet);
                });
                //TODO: subscribe
                //this.form.subscribe();
                $(_this.element).sortable("refresh");
            };
            this.form = form;
        }
        Object.defineProperty(SortableViewModel.prototype, "editor", {
            get: function () {
                return this.form.editor;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SortableViewModel.prototype, "targetMode", {
            get: function () {
                return this.form.targetMode;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SortableViewModel.prototype, "commonTab", {
            get: function () {
                return this.editor.commonTab;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SortableViewModel.prototype, "readOnly", {
            get: function () {
                return this.form.readOnly;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SortableViewModel.prototype, "snippets", {
            get: function () {
                return this.form.items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SortableViewModel.prototype, "element", {
            get: function () {
                return this.form.element;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SortableViewModel.prototype, "editor",
            __decorate([
                aurelia_framework_1.computedFrom('form'), 
                __metadata('design:type', formEditor_1.FormEditor)
            ], SortableViewModel.prototype, "editor", Object.getOwnPropertyDescriptor(SortableViewModel.prototype, "editor")));
        return SortableViewModel;
    })();
    exports.SortableViewModel = SortableViewModel;
});

//# sourceMappingURL=data:application/json;base64,