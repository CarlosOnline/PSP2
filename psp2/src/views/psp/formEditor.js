var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define(["require", "exports", './itemViewModel'], function (require, exports, itemViewModel_1) {
    var FormEditorType;
    (function (FormEditorType) {
        FormEditorType[FormEditorType["None"] = 0] = "None";
        FormEditorType[FormEditorType["Target"] = 1] = "Target";
        FormEditorType[FormEditorType["Common"] = 2] = "Common";
        FormEditorType[FormEditorType["Generic"] = 3] = "Generic";
    })(FormEditorType || (FormEditorType = {}));
    var FormEditor = (function (_super) {
        __extends(FormEditor, _super);
        function FormEditor(app, eventAggregator, utility) {
            var _this = this;
            _super.call(this, app, eventAggregator, utility);
            this.connectWith = null;
            this.url = null;
            this.target = {
                url: "views/psp/data/test.json",
                model: null,
                item: null,
            };
            this.tabs = {
                url: "views/psp/data/tabs.json",
                model: null,
                item: null,
            };
            this.template = null;
            this.commonTab = null;
            this.itemType = itemViewModel_1.ItemType.TemplateEditor;
            this.itemTypeName = itemViewModel_1.ItemType[this.itemType];
            this.app.editor = this;
            g_Editor = this;
            var self = this;
            this.eventAggregator.subscribe("Snippet-bind", function (item) { _this.onSnippetBind(item); });
            this.eventAggregator.subscribe("Component-bind", function (item) { _this.onComponentBind(item); });
            this.eventAggregator.subscribe("SnippetForm-bind", function (item) { _this.onSnippetFormBind(item); });
            this.eventAggregator.subscribe("ComponentForm-bind", function (item) { _this.onComponentFormBind(item); });
            this.eventAggregator.subscribe("Header-bind", function (item) { _this.onHeaderBind(item); });
        }
        FormEditor.prototype.activate = function (params, queryParams, config) {
            console.log("activate", params, queryParams);
            //TODO: get model from data, download data
            var self = this;
            this.utility.loadUrl(this.target.url).then(function (model) {
                model.targetMode = true;
                self.target.model = model;
            });
            this.utility.loadAllTabs(this.tabs.url).then(function (model) {
                self.tabs.model = model;
            });
            var $sortables = $(".sortable");
            if ($sortables.sortable) {
                console.log("Apply sortables");
                $sortables.sortable();
            }
        };
        FormEditor.prototype.updateUiElements = function () {
            console.error("TODO updateUiElements");
        };
        FormEditor.prototype.resizeCoverUp = function (elem) {
            // just make the inputs read only
            // TODO: Remove on render
            //console.log("resizeCoverUp", elem);
            $(".control-component input").prop('readonly', true);
            $(".control-component :checkbox").prop('readonly', true);
            $(".control-component input").addClass("input-cover-up");
            $(".control-component :checkbox").addClass("input-cover-up");
            $(".control-component span.name").addClass("input-cover-up");
            return; // TODO:
            var $elem = $(elem);
            var item = $elem.data("itemViewModel");
            if (!item) {
                console.error("missing itemViewModel", elem);
                return;
            }
            var container = item.element;
            if (!container) {
                console.error("missing itemViewModel element", elem);
                return;
            }
            var $container = $(container);
            var position = $container.offset();
            $elem.offset({ left: position.left, top: position.top, });
            $elem.width($container.width());
            $elem.height($container.height());
            //console.log("resizeCoverUp", position.left, position.top, $container.width(), $container.height(), item.element, elem);
        };
        FormEditor.prototype.resizeCoverUps = function () {
            var self = this;
            $(".cover-up").each(function (idx, elem) {
                self.resizeCoverUp(elem);
            });
        };
        FormEditor.prototype.resizeItemCoverUp = function (item) {
            return;
            if (!item.coverUp)
                return;
            var self = this;
            setTimeout(function () {
                self.resizeCoverUp(item.coverUp);
            }, 0);
        };
        FormEditor.prototype.onSnippetFormBind = function (item) {
            //console.log("onSnippetFormBind", item);
            if (item.model.targetMode) {
                this.target.item = item;
            }
            $(".sortable").sortable();
            this.resizeCoverUps();
        };
        FormEditor.prototype.onSnippetBind = function (item) {
            //console.log("onSnippetBind", item);
            this.resizeItemCoverUp(item);
        };
        FormEditor.prototype.onComponentFormBind = function (item) {
            //console.log("onComponentFormBind", item);
            $(".sortable").sortable();
            this.resizeCoverUps();
        };
        FormEditor.prototype.onComponentBind = function (item) {
            //console.log("onComponentBind", component, component.element);
            this.resizeItemCoverUp(item);
        };
        FormEditor.prototype.onHeaderBind = function (item) {
            this.resizeItemCoverUp(item);
        };
        return FormEditor;
    })(itemViewModel_1.ItemViewModel);
    exports.FormEditor = FormEditor;
});

//# sourceMappingURL=data:application/json;base64,